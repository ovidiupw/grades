# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Grades API
  description: Grades API
  version: "1.0.0"
# the domain of the service
host: localhost
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:

  /accounts/new:
    post:
      summary: Create an account to use with Grades.
      description: |
        The register endpoint sends user information to the server (university account and a password) as a request to create a new identity to use within Grades application. In case of success this method should return a short message that tells the user an email will be sent to the university identitiy (supplied email as user_id) if it was from a valid domain, validated in backend (e.g. info.uaic.ro). <br><br>
        
        If no error is encountered, this method should create a temporary resource (account) in the accounts database with a "pending validation" status, resembling the fact that this account needs to be validated with the email address supplied at registration.
      parameters:
        - name: user_credentials
          in: body
          description: The credentials object sent to the server
          required: true
          schema:
            $ref: '#/definitions/LoginCredentials'
      tags:
        - Register
      responses:
        200:
          description: Should contain a success indicator (text) which tells the user that an email was sent to the supplied address (user_id) to verify his/her identity within the University
          schema:
            type: string
        400:
          description: Either user_id or password were invalid, the email address domain was not among the trusted domains or an account with the supplied user_id already exists
          schema:
            $ref: '#/definitions/Error'
            
            
  /accounts/confirmation:
    put:
      summary: Confirm your identity with the supplied email address
      description: |
       After a user registeres with a new account, user_id (email) and password, if the email does not already belong to a registered user, a confirmation email is sent to email address supplied at registration to confirm that the user is who he claims. This email is sent conditionally, by taking into account the trusted domains that are configured on the server (in a databse, configurable by an administrator). <br><br>
       Successful confirmation means that the account status in the database will change to "validated" and the user will be able to use the credentials supplied at registration to login into the application.
      parameters:
        - name: login_confirmation
          in: body
          description: The confirmation code in the email sent to the email address supplied when the registration request was made. Should be 6 characters long, randomnly generated in backend and containing only alpha-numeric characters (small and upper case & numbers)
          required: true
          schema:
            $ref: '#/definitions/RegistrationConfirmation'
      tags:
        - Register
      responses:
        200:
          description: Should not contain anything
          schema:
            type: string
        400:
          description: If the confirmation code was incorrect
          schema:
            $ref: '#/definitions/Error'
            
  /accounts/login:
    post:
      summary: Authenticate with the API and obtain endpoint access permissions
      description: |
        For a user to gain access to the application and obtain permissions to access the api, the user must first authenticate. The authentication is a 3-step process, as depicted in the following list. Note that the user must have registered within the application before being able to log in.
          <ol>
            <li>The user supplies a set of credentials comprised of user_id and password to the server. The credential's password field (only) will first be encoded in base 64 before being sent to the server.</li><br>
            <li>If the supplied credentials are valid, the server identifies the user's permissions by consulting the permissions associated with that user account in the database and generates a unique access token and identifies the role associated with that account and the corresponding permissions\* \*\*.<br>
            <em>\* Note that the access token will be temporary and any subsequent use of the access token after its expiration date will need to prohibit access to any resources it previously allowed access to</em>. <br>
            <em>\*\* The access token needs to be at least 128 bits and conform to these <a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet">regulations</a></em>. <br>
            The server, then, responds with the newly generated access token.</li><br>
            <li>Once the client obtains the access token from the server, it stores the access key locally and uses this key for subsequent calls to the api (it will be included within each request, in the headers section of the http request - see <a href="http://stackoverflow.com/questions/3258645/pass-request-headers-in-a-jquery-ajax-get-call">Ajax XHR signing</a>)</li>.
          </ol>
      parameters:
        - name: login_credentials
          in: body
          description: The credentials object sent to the server
          required: true
          schema:
            $ref: '#/definitions/LoginCredentials'
      tags:
        - Login
      responses:
        200:
          description: Should contain the access token supplied by authenticating the user within the aplication and the assumed_role corresponding to the access token (api_key). The access token will be used to authenticate subsequent calls to the api
          schema:
            $ref: '#/definitions/LoginResponse'
        400:
          description: Either user_id or password were invalid or an account with the supplied user_id does not exist
          schema:
            $ref: '#/definitions/Error'
            
  /user/subordinates:
    get:
      summary: Retrieves the list of users that are subordinate to the current user
      description: |
        Returns a list of users that are subordinate to the current logged in user and have the specified role - that is - the users with the specified role of who are subordinate to the current authenticated user (the role of the authenticated user is internally associated, in the databse, with the api_key which the users sends within this request's header.
      security:
        - api_key: []
      tags:
        - Role hierarchy
      parameters:
        - name: role
          in: query
          description: The role which retrieved subordinate users should have
          required: true
          type: string
      responses:
        200:
          description: Should contain a list of users which are subordinate to the developers and have the specified role or an empty list if no user is currently subordinate to the authenticated user's role.
          schema:
            $ref: '#/definitions/SubordinatesList'
        400:
          description: The api_key provided does not allow access to this resource or has expired
          
  /user/subordinates/roles:
    get:
      summary: Retrieves the list of roles (literally, as registered in the databse) that are subordinate to the current user
      description: |
        Retrieves the list of roles (literally, as registered in the databse) that are subordinate to the current user. The actual roles are only one level below subordinates with respect to the currently authenticated user role - only direct subordinates.
      security:
        - api_key: []
      tags:
        - Role hierarchy
      responses:
        200:
          description: Should contain a list of roles that are directly one level below subordinate to the currently authenticated user
          schema:
            $ref: '#/definitions/SubordinatesRoleList'
        400:
          description: The api_key provided does not allow access to this resource or has expired    
        
        
  
  /config/students:
    post:
      summary: Registers a new list of students in the databse (adds students into the application)
      description: |
        Adds a list of students in the databse. The currently authenticated user must be allowed to add students in the application (via his/her's api_key) which is associated with a role. This operation creates new entities on the server and returns a log of what the state of the student-add operation was on the server.
      security:
        - api_key: []
      tags:
        - Configuration
      parameters:
        - name: students
          in: body
          description: An array of students to be added into the database
          required: true
          schema:
            $ref: '#/definitions/StudentsArray'
      responses:
        200:
          description: Should contain a log of the failed student-add operations on the server or an empty log otherwise
          schema:
            $ref: '#/definitions/StudentsArray'
        400:
          description: The api_key provided does not allow access to this resource or has expired
          
    
          
        
            
  /secretary/dashboard:
    get:
      summary: Retrieves the dashboard information for the secretary user role. The dashboard should be a summary page of the entire list of use-cases a secretary is allowed to have.
      description: |
        Retrieves the dashboard information for the secretary user role. The dashboard information includes, but is not subsequently limited to
        <ul>
          <li>
            full user name
          </li>
          <li>
            total number of students responsible for
          </li>
        </ul>
      security:
        - api_key: []
      tags:
        - Secretary
      responses:
        200:
          description: Should contain fields from the list in the Description
          schema:
            $ref: '#/definitions/SecretaryDashboard'
        400:
          description: Either user_id or password were invalid or an account with the supplied user_id does not exist
          schema:
            $ref: '#/definitions/Error'
            
          
          
          
          
          

definitions:
  # Account creation - Registration
  LoginCredentials:
    type: object
    required: [user_id, password]
    properties:
      user_id:
        type: string
        description: The university identity of the user (e.g. email address). Should be one of the restricted domain names on the server.
      password:
        type: string
        description: The base 64 encoding of the password chosen for the userId (corresponding to it). The password should comply with https://wdeww.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls
        
  RegistrationConfirmation:
    type: object
    required: [confirmation_code]
    properties:
      confirmation_code:
        type: string
        
  LoginResponse:
    type: object
    properties:
      api_key:
        type: string
        description: The api key generated according to the login user_id and password and associated role on the server
      assumed_role:
        type: string
        description: The role associated with the api_key generated as a result of successful authentication.
        
  SubordinatesList:
    type: object
    properties:
      subordinates:
        description: The list of subordinates
        type: array
        items:
          type: object
          description: One of the subordinates as an object representation containing user_id and user_role
          properties:
            user_id:
              type: string
              description: The user_id of the subordinate
            user_role:
              type: string
              description: The role of the user with user_id
          
  SubordinatesRoleList:
    type: object
    properties:
      roles:
        type: array
        description: The list of roles that are subordinated to the current authenticated user's role
        items:
          type: string
          
  StudentsArray:
    type: object
    properties:
      students:
        type: array
        description: An array of objects containing student account information
        items:
          $ref: '#/definitions/Student'
            
  # Application entities - Student, Professor etc.
  Student:
    type: object
    required: [user_id, nr_matricol, date_of_birth, academic_year, academic_group]
    properties:
      user_id:
        type: string
        description: The university identity of the user (e.g. email address). Should be one of the restricted domain names on the server.
      nr_matricol:
        type: string
        description: The student's nr_matricol identifier
      date_of_birth:
        type: string
        format: date
        description: The student's date of birth (ro, data de nastere a studentului)
      academic_year:
        type: integer
        description: The student's academic year of study (ro, anul de studiu al studentului)
      academic_group:
        type: string
        description: The student's academic group (ro, grupa studentului)
      
    
  SecretaryDashboard:
    type: object
    properties:
      full_name:
        type: string
        description: The full name of the secretary
      number_of_students_responsible_for:
        type: integer
        description: The total number of students the secretary is responsible for
      
        
        
  # Errors      
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
